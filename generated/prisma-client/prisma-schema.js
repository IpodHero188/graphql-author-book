module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHero {
  count: Int!
}

type AggregateMultiverse {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Hero {
  id: Int!
  name: String!
  skill: String
}

type HeroConnection {
  pageInfo: PageInfo!
  edges: [HeroEdge]!
  aggregate: AggregateHero!
}

input HeroCreateInput {
  name: String!
  skill: String
}

type HeroEdge {
  node: Hero!
  cursor: String!
}

enum HeroOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  skill_ASC
  skill_DESC
}

type HeroPreviousValues {
  id: Int!
  name: String!
  skill: String
}

type HeroSubscriptionPayload {
  mutation: MutationType!
  node: Hero
  updatedFields: [String!]
  previousValues: HeroPreviousValues
}

input HeroSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeroWhereInput
  AND: [HeroSubscriptionWhereInput!]
  OR: [HeroSubscriptionWhereInput!]
  NOT: [HeroSubscriptionWhereInput!]
}

input HeroUpdateInput {
  name: String
  skill: String
}

input HeroUpdateManyMutationInput {
  name: String
  skill: String
}

input HeroWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  skill: String
  skill_not: String
  skill_in: [String!]
  skill_not_in: [String!]
  skill_lt: String
  skill_lte: String
  skill_gt: String
  skill_gte: String
  skill_contains: String
  skill_not_contains: String
  skill_starts_with: String
  skill_not_starts_with: String
  skill_ends_with: String
  skill_not_ends_with: String
  AND: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  NOT: [HeroWhereInput!]
}

input HeroWhereUniqueInput {
  id: Int
}

scalar Long

type Multiverse {
  id: Int!
  name: String!
}

type MultiverseConnection {
  pageInfo: PageInfo!
  edges: [MultiverseEdge]!
  aggregate: AggregateMultiverse!
}

input MultiverseCreateInput {
  name: String!
}

type MultiverseEdge {
  node: Multiverse!
  cursor: String!
}

enum MultiverseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MultiversePreviousValues {
  id: Int!
  name: String!
}

type MultiverseSubscriptionPayload {
  mutation: MutationType!
  node: Multiverse
  updatedFields: [String!]
  previousValues: MultiversePreviousValues
}

input MultiverseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MultiverseWhereInput
  AND: [MultiverseSubscriptionWhereInput!]
  OR: [MultiverseSubscriptionWhereInput!]
  NOT: [MultiverseSubscriptionWhereInput!]
}

input MultiverseUpdateInput {
  name: String
}

input MultiverseUpdateManyMutationInput {
  name: String
}

input MultiverseWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [MultiverseWhereInput!]
  OR: [MultiverseWhereInput!]
  NOT: [MultiverseWhereInput!]
}

input MultiverseWhereUniqueInput {
  id: Int
}

type Mutation {
  createHero(data: HeroCreateInput!): Hero!
  updateHero(data: HeroUpdateInput!, where: HeroWhereUniqueInput!): Hero
  updateManyHeroes(data: HeroUpdateManyMutationInput!, where: HeroWhereInput): BatchPayload!
  upsertHero(where: HeroWhereUniqueInput!, create: HeroCreateInput!, update: HeroUpdateInput!): Hero!
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteManyHeroes(where: HeroWhereInput): BatchPayload!
  createMultiverse(data: MultiverseCreateInput!): Multiverse!
  updateMultiverse(data: MultiverseUpdateInput!, where: MultiverseWhereUniqueInput!): Multiverse
  updateManyMultiverses(data: MultiverseUpdateManyMutationInput!, where: MultiverseWhereInput): BatchPayload!
  upsertMultiverse(where: MultiverseWhereUniqueInput!, create: MultiverseCreateInput!, update: MultiverseUpdateInput!): Multiverse!
  deleteMultiverse(where: MultiverseWhereUniqueInput!): Multiverse
  deleteManyMultiverses(where: MultiverseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hero(where: HeroWhereUniqueInput!): Hero
  heroes(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hero]!
  heroesConnection(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeroConnection!
  multiverse(where: MultiverseWhereUniqueInput!): Multiverse
  multiverses(where: MultiverseWhereInput, orderBy: MultiverseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Multiverse]!
  multiversesConnection(where: MultiverseWhereInput, orderBy: MultiverseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MultiverseConnection!
  node(id: ID!): Node
}

type Subscription {
  hero(where: HeroSubscriptionWhereInput): HeroSubscriptionPayload
  multiverse(where: MultiverseSubscriptionWhereInput): MultiverseSubscriptionPayload
}
`
      }
    